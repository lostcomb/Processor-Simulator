name: lens
version: 4.15.1
id: lens-4.15.1-a1abf9165610f95b9623c4ff5be315d1
license: BSD3
copyright: Copyright (C) 2012-2016 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
package-url:
synopsis: Lenses, Folds and Traversals
description: This package comes \"Batteries Included\" with many useful lenses for the types
             commonly used from the Haskell Platform, and with tools for automatically
             generating lenses and isomorphisms for user-supplied data types.
             .
             The combinators in @Control.Lens@ provide a highly generic toolbox for composing
             families of getters, folds, isomorphisms, traversals, setters and lenses and their
             indexed variants.
             .
             An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
             .
             An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
             .
             A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
             .
             Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
             .
             More information on the care and feeding of lenses, including a brief tutorial and motivation
             for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
             .
             A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
             .
             /Lenses, Folds and Traversals/
             .
             With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
             .
             .
             <<http://i.imgur.com/ALlbPRa.png>>
             .
             <Hierarchy.png (Local Copy)>
             .
             You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
             use any element of the hierarchy as any type it linked to above it.
             .
             The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
             .
             For instance:
             .
             * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
             .
             * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
             .
             /Minimizing Dependencies/
             .
             If you want to provide lenses and traversals for your own types in your own libraries, then you
             can do so without incurring a dependency on this (or any other) lens package at all.
             .
             /e.g./ for a data type:
             .
             > data Foo a = Foo Int Int a
             .
             You can define lenses such as
             .
             > -- bar :: Lens' (Foo a) Int
             > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
             > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
             .
             > -- quux :: Lens (Foo a) (Foo b) a b
             > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
             > quux f (Foo a b c) = fmap (Foo a b) (f c)
             .
             without the need to use any type that isn't already defined in the @Prelude@.
             .
             And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
             .
             > -- traverseBarAndBaz :: Traversal' (Foo a) Int
             > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
             > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
             .
             What is provided in this library is a number of stock lenses and traversals for
             common haskell types, a wide array of combinators for working them, and more
             exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
author: Edward A. Kmett
exposed: True
exposed-modules: Control.Exception.Lens Control.Lens
                 Control.Lens.At Control.Lens.Combinators Control.Lens.Cons
                 Control.Lens.Each Control.Lens.Empty Control.Lens.Equality
                 Control.Lens.Extras Control.Lens.Fold Control.Lens.Getter
                 Control.Lens.Indexed Control.Lens.Internal
                 Control.Lens.Internal.Bazaar Control.Lens.Internal.ByteString
                 Control.Lens.Internal.Coerce Control.Lens.Internal.Context
                 Control.Lens.Internal.Deque Control.Lens.Internal.Exception
                 Control.Lens.Internal.FieldTH Control.Lens.Internal.PrismTH
                 Control.Lens.Internal.Fold Control.Lens.Internal.Getter
                 Control.Lens.Internal.Indexed Control.Lens.Internal.Instances
                 Control.Lens.Internal.Iso Control.Lens.Internal.Level
                 Control.Lens.Internal.List Control.Lens.Internal.Magma
                 Control.Lens.Internal.Prism Control.Lens.Internal.Review
                 Control.Lens.Internal.Setter Control.Lens.Internal.TH
                 Control.Lens.Internal.Zoom Control.Lens.Iso Control.Lens.Lens
                 Control.Lens.Level Control.Lens.Operators Control.Lens.Plated
                 Control.Lens.Prism Control.Lens.Reified Control.Lens.Review
                 Control.Lens.Setter Control.Lens.TH Control.Lens.Traversal
                 Control.Lens.Tuple Control.Lens.Type Control.Lens.Wrapped
                 Control.Lens.Zoom Control.Monad.Error.Lens
                 Control.Parallel.Strategies.Lens Control.Seq.Lens Data.Array.Lens
                 Data.Bits.Lens Data.ByteString.Lens Data.ByteString.Strict.Lens
                 Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
                 Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
                 Data.Map.Lens Data.Sequence.Lens Data.Set.Lens Data.Text.Lens
                 Data.Text.Strict.Lens Data.Text.Lazy.Lens Data.Tree.Lens
                 Data.Typeable.Lens Data.Vector.Lens Data.Vector.Generic.Lens
                 GHC.Generics.Lens System.Exit.Lens System.FilePath.Lens
                 System.IO.Error.Lens Language.Haskell.TH.Lens Numeric.Lens
hidden-modules: Paths_lens
trusted: False
import-dirs: /home/fe14/jl14910/linux/Documents/Year_3/Advanced_Computer_Architecture/aca-processor-simulator/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.4/lens-4.15.1
library-dirs: /home/fe14/jl14910/linux/Documents/Year_3/Advanced_Computer_Architecture/aca-processor-simulator/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.4/lens-4.15.1
hs-libraries: HSlens-4.15.1
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: array-0.5.0.0-ce080a527b3819e94d851f7f80ca77dd
         base-4.7.0.2-cb23b5265b6e147094c0cd9ac819acb1
         base-orphans-0.5.4-ea3c197ca9ef7e01a4fa3e623cff0bf5
         bifunctors-5.4.1-57fa7c5aa62ca3e7d5226ea3b4f2991b
         bytestring-0.10.4.0-e82797828c29adab75d6eb4b53384f09
         comonad-5-77f723d9e6d489d20c2e8481de5f7b76
         containers-0.5.5.1-d7910f1cd81272c1f31ca9f71d0f206e
         contravariant-1.4-ea2cf6e1457b7ae294708d9c29ccc500
         distributive-0.5.0.2-403e6316f34e4405f83eb8de7b0bd9a5
         exceptions-0.8.3-b42869aa0a50d8c7a383393922a98090
         filepath-1.3.0.2-25a474a9272ae6260626ce0d70ad1cab
         free-4.12.4-34cfb487236cd320a24f917bf377efa1
         generic-deriving-1.11.1-d08f54397e8baa382f86ae30095ffb06
         ghc-prim-0.3.1.0-a24f9c14c632d75b683d0f93283aea37
         hashable-1.2.2.0-c8b5f918fdaae07b36b06d55f8ca3719
         kan-extensions-5.0.1-a1203c1e8d8e1f1a35976c1562876441
         mtl-2.1.3.1-96f1a7910a7553352339ed05fb61c269
         parallel-3.2.0.4-c6068efe3a68034cdefb35f10038b062
         profunctors-5.2-a4cf080173a528bf6f8f9ca05bf5dd38
         reflection-2.1.2-aadbd062b12561d05d5cc1fdf3f3801b
         semigroupoids-5.1-d02570393a5d5062303fdf9e26032a12
         semigroups-0.18.2-a45a18c2ca5586487a51b8dd1dfe606c
         tagged-0.8.5-36018b0e44202fc604fe19220f00c90b
         template-haskell-2.9.0.0-2da82c8da1f1cb8620b884ecd5a2274d
         text-1.1.1.3-41a1b42bfbf393e802c95c88f57d2452
         transformers-0.3.0.0-6458c21515cab7c1cf21e53141557a1c
         transformers-compat-0.5.1.4-e51673b774aab099f54f5eed42d8017f
         unordered-containers-0.2.4.0-614eca3080c1c4f6c40204082b6e3231
         vector-0.10.9.1-2f5cf77c20260b20755a9f1aebe4529b
         void-0.7.1-d1da5433bbcda8a07fd0770fd3e50c14
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /home/fe14/jl14910/linux/Documents/Year_3/Advanced_Computer_Architecture/aca-processor-simulator/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.8.4/lens-4.15.1/html/lens.haddock
haddock-html: /home/fe14/jl14910/linux/Documents/Year_3/Advanced_Computer_Architecture/aca-processor-simulator/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.8.4/lens-4.15.1/html
